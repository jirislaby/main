--- psi.orig/src/chatdlg.cpp
+++ psi/src/chatdlg.cpp
@@ -1254,15 +1254,17 @@ void ChatDlg::chatEditCreated()
 
 TabbableWidget::State ChatDlg::state() const
 {
-    switch (contactChatState_) {
-        case XMPP::StateComposing:
-            return TabbableWidget::StateComposing;
-        case XMPP::StateInactive:
-        case XMPP::StateGone:
-            return TabbableWidget::StateInactive;
-        default:
-            return TabbableWidget::StateNone;
+    TabbableWidget::State state = TabbableWidget::StateNone;
+    if(contactChatState_ == XMPP::StateComposing) {
+        state = TabbableWidget::StateComposing;
     }
+    else if(unreadMessageCount()) {
+        state = TabbableWidget::StateHighlighted;
+    } else if (contactChatState_ == XMPP::StateInactive || contactChatState_ == XMPP::StateGone) {
+        state = TabbableWidget::StateInactive;
+    }
+
+    return state;
 }
 
 int ChatDlg::unreadMessageCount() const
--- psi.orig/src/groupchatdlg.cpp
+++ psi/src/groupchatdlg.cpp
@@ -2552,7 +2552,7 @@ void GCMainDlg::chatEditCreated()
 
 TabbableWidget::State GCMainDlg::state() const
 {
-    return TabbableWidget::StateNone;
+    return d->hPending ? TabbableWidget::StateHighlighted : TabbableWidget::StateNone;
 }
 
 int GCMainDlg::unreadMessageCount() const
--- psi.orig/src/tabs/tabbablewidget.h
+++ psi/src/tabs/tabbablewidget.h
@@ -65,7 +65,8 @@ public:
     enum State {
         StateNone = 0,
         StateComposing,
-        StateInactive
+        StateInactive,
+        StateHighlighted
     };
     virtual State state() const = 0;
     virtual int unreadMessageCount() const = 0;
--- psi.orig/src/tabs/tabdlg.cpp
+++ psi/src/tabs/tabdlg.cpp
@@ -656,21 +656,27 @@ void TabDlg::updateTab(TabbableWidget* chat)
     tabWidget_->setTabText(chat, captionForTab(chat));
     //now set text colour based upon whether there are new messages/composing etc
 
-    if (chat->state() == TabbableWidget::StateComposing) {
+    TabbableWidget::State state = chat->state();
+    if (state == TabbableWidget::StateComposing) {
         tabWidget_->setTabTextColor(chat, PsiOptions::instance()->getOption("options.ui.look.colors.chat.composing-color").value<QColor>());
         tabWidget_->setTabIcon(chat, IconsetFactory::iconPtr("psi/typing")->icon());
     }
-    else if (chat->unreadMessageCount()) {
-        tabWidget_->setTabTextColor(chat, PsiOptions::instance()->getOption("options.ui.look.colors.chat.unread-message-color").value<QColor>());
-        tabWidget_->setTabIcon(chat, IconsetFactory::iconPtr("psi/chat")->icon());
-    }
-    else if (chat->state() == TabbableWidget::StateInactive) {
-        tabWidget_->setTabTextColor(chat, PsiOptions::instance()->getOption("options.ui.look.colors.chat.inactive-color").value<QColor>());
-        tabWidget_->setTabIcon(chat, chat->icon());
-    }
     else {
-        tabWidget_->setTabTextColor(chat, palette().color(QPalette::Text));
-        tabWidget_->setTabIcon(chat, chat->icon());
+        if (state == TabbableWidget::StateHighlighted) {
+            tabWidget_->setTabTextColor(chat, PsiOptions::instance()->getOption("options.ui.look.colors.chat.unread-message-color").value<QColor>());
+        }
+        else if (state == TabbableWidget::StateInactive) {
+            tabWidget_->setTabTextColor(chat, PsiOptions::instance()->getOption("options.ui.look.colors.chat.inactive-color").value<QColor>());
+        } else {
+            tabWidget_->setTabTextColor(chat, palette().color(QPalette::Text));
+        }
+
+        if(chat->unreadMessageCount()) {
+            tabWidget_->setTabIcon(chat, IconsetFactory::iconPtr("psi/chat")->icon());
+        }
+        else {
+            tabWidget_->setTabIcon(chat, chat->icon());
+        }
     }
     updateCaption();
 }
